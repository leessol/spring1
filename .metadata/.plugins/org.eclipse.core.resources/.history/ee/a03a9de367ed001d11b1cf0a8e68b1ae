package com.shinhan.controller;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.shinhan.model.CompanyService;
import com.shinhan.model.DeptService;
import com.shinhan.vo.DeptVO;

@Controller
@RequestMapping("/dept")
public class DeptController {

	@Autowired
	DeptService dService;

	@Autowired
	CompanyService cService;

	Logger logger = LoggerFactory.getLogger(EmpController.class);
	
	/*
	//Local error --> 이 클래스(DeptController 컨트롤러)에 있는 것들만 가능하다. 
	@ExceptionHandler(Exception.class) //Exception class의 하위 클래스들은 전부 여기로 들어온
	public String errorProcess(Exception ex) {
		ex.printStackTrace();
		logger.info(ex.getMessage());
		return "/error/error500";
	}
	*/

	@RequestMapping(value = "/deptList.do", method = RequestMethod.GET)
	public String deptList(Model model) {

		List<DeptVO> deptList = dService.deptSelectAll();
		model.addAttribute("deptAll", deptList);

		return "dept/deptSelect";
	}

	@RequestMapping(value = "/deptInsert.do", method = RequestMethod.GET)
	public String deptInsertGet(Model model) {

		/*
		 * List<DeptVO> deptList = dService.deptSelectAll();
		 * model.addAttribute("deptAll",deptList);
		 */
		// model.addAttribute("deptList", cService.deptSelectAll());
		model.addAttribute("managerList", cService.managerSelectAll());
		model.addAttribute("locationList", cService.locationSelectAll());
		return "dept/deptInsert";
	}

	@RequestMapping(value = "/deptInsert.do", method = RequestMethod.POST)
	public String deptInsertPost(DeptVO dept, RedirectAttributes redirectAttr) {
		logger.info(dept.toString());

		String result = dService.deptInsert(dept);

		// redirect할 때, result의 값도 같이 넘겨준다. 원래는 session에다가 했었음. redirect는 페이지 리로딩이었으니깐.
		redirectAttr.addFlashAttribute("resultMessage", result);

		return "redirect:/dept/deptList.do";
	}

	@RequestMapping(value = "/deptDetail.do", method = RequestMethod.GET)
	public String deptDetailGeT(int deptid, Model model) {
		DeptVO dept = dService.selectById(deptid);
		model.addAttribute("managerList", cService.managerSelectAll());
		model.addAttribute("locationList", cService.locationSelectAll());
		model.addAttribute("dept", dept);

		return "dept/deptDetail";
	}

	@RequestMapping(value = "/deptDetail.do", method = RequestMethod.POST)
	public String deptDetailPost(DeptVO dept, RedirectAttributes redirectAttr) {
		String result = dService.deptUpdate(dept);

		// redirect할 때, result의 값도 같이 넘겨준다. 원래는 session에다가 했었음. redirect는 페이지 리로딩이었으니깐.
		redirectAttr.addFlashAttribute("resultMessage", result);
		return "redirect:/dept/deptList.do";
	}

}
